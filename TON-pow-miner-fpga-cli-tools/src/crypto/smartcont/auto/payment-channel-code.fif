// automatically generated from `smartcont/stdlib.fc` `smartcont/payment-channel-code.fc` 
PROGRAM{
  DECLPROC unpack_data
  DECLPROC pack_data
  DECLPROC unpack_config
  DECLPROC unwrap_signatures
  DECLPROC unpack_state_init
  DECLPROC pack_state_init
  DECLPROC unpack_state_close
  DECLPROC pack_state_close
  DECLPROC send_payout
  DECLPROC do_payout
  DECLPROC with_init
  DECLPROC with_close
  DECLPROC with_payout
  DECLPROC recv_any
  DECLPROC recv_internal
  DECLPROC recv_external
  unpack_data PROCREF:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  cs
    LDREF	//  _4 cs
    LDREF	//  res res cs
    ENDS
  }>
  pack_data PROCREF:<{
    //  config state
    SWAP
    NEWC	//  state config _2
    STREF	//  state _3
    STREF	//  _4
    ENDC	//  _5
    c4 POP
  }>
  unpack_config PROC:<{
    //  config
    CTOS	//  cs
    32 LDU	//  _4 cs
    32 LDU	//  _4 _7 cs
    256 LDU	//  _4 _7 _10 cs
    256 LDU	//  _4 _7 _10 _13 cs
    LDREF	//  _4 _7 _10 _13 _16 cs
    SWAP	//  _4 _7 _10 _13 cs _16
    CTOS	//  _4 _7 _10 _13 cs _18
    SWAP	//  _4 _7 _10 _13 _18 cs
    LDREF	//  _4 _7 _10 _13 _18 _19 cs
    SWAP	//  _4 _7 _10 _13 _18 cs _19
    CTOS	//  _4 _7 _10 _13 _18 cs _21
    SWAP	//  _4 _7 _10 _13 _18 _21 cs
    64 LDU	//  _4 _7 _10 _13 _18 _21 _22 cs
    LDGRAMS	//  res res res res res res res res cs
    ENDS
  }>
  unwrap_signatures PROC:<{
    //  cs a_key b_key
    s0 s2 XCHG	//  b_key a_key cs
    1 LDI	//  b_key a_key a? cs
    s0 s1 PUSH2	//  b_key a_key a? cs a_sig a?
    IF:<{	//  b_key a_key a? cs a_sig
      DROP	//  b_key a_key a? cs
      LDREF	//  b_key a_key a? _8 cs
      SWAP	//  b_key a_key a? cs _8
      CTOS	//  b_key a_key a? cs _10
      9 PUSHPOW2	//  b_key a_key a? cs _10 _11=512
      PLDSLICEX	//  b_key a_key a? cs a_sig
    }>	//  b_key a_key a? cs a_sig
    SWAP	//  b_key a_key a? a_sig cs
    1 LDI	//  b_key a_key a? a_sig b? cs
    s0 s1 PUSH2	//  b_key a_key a? a_sig b? cs b_sig b?
    IF:<{	//  b_key a_key a? a_sig b? cs b_sig
      DROP	//  b_key a_key a? a_sig b? cs
      LDREF	//  b_key a_key a? a_sig b? _18 cs
      SWAP	//  b_key a_key a? a_sig b? cs _18
      CTOS	//  b_key a_key a? a_sig b? cs _20
      9 PUSHPOW2	//  b_key a_key a? a_sig b? cs _20 _21=512
      PLDSLICEX	//  b_key a_key a? a_sig b? cs b_sig
    }>	//  b_key a_key a? a_sig b? cs b_sig
    OVER	//  b_key a_key a? a_sig b? cs b_sig cs
    HASHSU	//  b_key a_key a? a_sig b? cs b_sig hash
    s5 PUSH	//  b_key a_key a? a_sig b? cs b_sig hash a?
    IF:<{	//  b_key a_key a? a_sig b? cs b_sig hash
      31 PUSHINT	//  b_key a_key a? a_sig b? cs b_sig hash _25
      s1 s5 s7 PUXC2	//  b_key hash a? _25 b? cs b_sig hash a_sig a_key
      CHKSIGNU	//  b_key hash a? _25 b? cs b_sig _26
      s1 s4 XCHG	//  b_key hash a? b_sig b? cs _25 _26
      THROWANYIFNOT
      s2 s4 XCHG	//  b_key b_sig a? hash b? cs
    }>ELSE<{
      s4 POP
      s5 POP	//  b_key b_sig a? hash b? cs
    }>
    OVER	//  b_key b_sig a? hash b? cs b?
    IF:<{	//  b_key b_sig a? hash b? cs
      32 PUSHINT	//  b_key b_sig a? hash b? cs _28
      s3 s5 s6 XCHG3	//  _28 cs a? b? hash b_sig b_key
      CHKSIGNU	//  _28 cs a? b? _29
      s1 s4 XCHG	//  b? cs a? _28 _29
      THROWANYIFNOT
      s1 s2 XCHG	//  cs b? a?
    }>ELSE<{
      s5 POP
      s3 POP
      DROP	//  cs b? a?
    }>
    SWAP	//  cs a? b?
  }>
  unpack_state_init PROC:<{
    //  state
    1 LDI	//  _1 state
    1 LDI	//  _1 _4 state
    LDGRAMS	//  _1 _4 _7 state
    LDGRAMS	//  _1 _4 _7 _9 state
    32 LDU	//  _1 _4 _7 _9 _11 state
    LDGRAMS	//  _1 _4 _7 _9 _11 _14 state
    LDGRAMS	//  _1 _4 _7 _9 _11 _14 _31 _30
    DROP	//  _1 _4 _7 _9 _11 _14 _16
  }>
  pack_state_init PROC:<{
    //  signed_A? signed_B? min_A min_B expire_at A B
    0 PUSHINT	//  signed_A? signed_B? min_A min_B expire_at A B _7
    NEWC	//  signed_A? signed_B? min_A min_B expire_at A B _7 _8
    3 STI	//  signed_A? signed_B? min_A min_B expire_at A B _10
    s1 s7 XCHG	//  B signed_B? min_A min_B expire_at A signed_A? _10
    1 STI	//  B signed_B? min_A min_B expire_at A _12
    s1 s5 XCHG	//  B A min_A min_B expire_at signed_B? _12
    1 STI	//  B A min_A min_B expire_at _14
    s0 s3 XCHG2	//  B A expire_at min_B _14 min_A
    STGRAMS	//  B A expire_at min_B _15
    SWAP	//  B A expire_at _15 min_B
    STGRAMS	//  B A expire_at _16
    32 STU	//  B A _18
    SWAP	//  B _18 A
    STGRAMS	//  B _19
    SWAP	//  _19 B
    STGRAMS	//  _20
    ENDC	//  _21
  }>
  unpack_state_close PROC:<{
    //  state
    1 LDI	//  _1 state
    1 LDI	//  _1 _4 state
    LDGRAMS	//  _1 _4 _7 state
    LDGRAMS	//  _1 _4 _7 _9 state
    32 LDU	//  _1 _4 _7 _9 _11 state
    LDGRAMS	//  _1 _4 _7 _9 _11 _14 state
    LDGRAMS	//  _1 _4 _7 _9 _11 _14 _31 _30
    DROP	//  _1 _4 _7 _9 _11 _14 _16
  }>
  pack_state_close PROC:<{
    //  signed_A? signed_B? promise_A promise_B expire_at A B
    1 PUSHINT	//  signed_A? signed_B? promise_A promise_B expire_at A B _7
    NEWC	//  signed_A? signed_B? promise_A promise_B expire_at A B _7 _8
    3 STI	//  signed_A? signed_B? promise_A promise_B expire_at A B _10
    s1 s7 XCHG	//  B signed_B? promise_A promise_B expire_at A signed_A? _10
    1 STI	//  B signed_B? promise_A promise_B expire_at A _12
    s1 s5 XCHG	//  B A promise_A promise_B expire_at signed_B? _12
    1 STI	//  B A promise_A promise_B expire_at _14
    s0 s3 XCHG2	//  B A expire_at promise_B _14 promise_A
    STGRAMS	//  B A expire_at promise_B _15
    SWAP	//  B A expire_at _15 promise_B
    STGRAMS	//  B A expire_at _16
    32 STU	//  B A _18
    SWAP	//  B _18 A
    STGRAMS	//  B _19
    SWAP	//  _19 B
    STGRAMS	//  _20
    ENDC	//  _21
  }>
  send_payout PROC:<{
    //  s_addr amount channel_id flags
    0x37fe7810 PUSHINT	//  s_addr amount channel_id flags _4
    0 PUSHINT	//  s_addr amount channel_id flags _4 _5=0
    16 PUSHINT	//  s_addr amount channel_id flags _4 _5=0 _6=16
    NEWC	//  s_addr amount channel_id flags _4 _5=0 _6=16 _7
    6 STU	//  s_addr amount channel_id flags _4 _5=0 _9
    s0 s6 XCHG2	//  _5=0 amount channel_id flags _4 _9 s_addr
    STSLICER	//  _5=0 amount channel_id flags _4 _10
    s0 s4 XCHG2	//  _5=0 _4 channel_id flags _10 amount
    STGRAMS	//  _5=0 _4 channel_id flags _11
    s1 s4 XCHG	//  flags _4 channel_id _5=0 _11
    107 STU	//  flags _4 channel_id _25
    s1 s2 XCHG	//  flags channel_id _4 _25
    32 STU	//  flags channel_id _27
    64 STU	//  flags _29
    ENDC	//  flags _30
    SWAP	//  _30 flags
    SENDRAWMSG
  }>
  do_payout PROC:<{
    //  promise_A promise_B A B a_addr b_addr channel_id
    ACCEPT
    s5 s6 XCHG2	//  channel_id b_addr A B a_addr promise_B promise_A
    SUB	//  channel_id b_addr A B a_addr diff
    s3 PUSH	//  channel_id b_addr A B a_addr diff A
    NEGATE	//  channel_id b_addr A B a_addr diff _10
    s1 s(-1) PUXC	//  channel_id b_addr A B a_addr diff diff _10
    LESS	//  channel_id b_addr A B a_addr diff _11
    IF:<{	//  channel_id b_addr A B a_addr diff
      DROP	//  channel_id b_addr A B a_addr
      s2 PUSH	//  channel_id b_addr A B a_addr A
      NEGATE	//  channel_id b_addr A B a_addr diff
    }>	//  channel_id b_addr A B a_addr diff
    s0 s2 PUSH2	//  channel_id b_addr A B a_addr diff diff B
    GREATER	//  channel_id b_addr A B a_addr diff _13
    IF:<{	//  channel_id b_addr A B a_addr diff
      DROP	//  channel_id b_addr A B a_addr
      OVER	//  channel_id b_addr A B a_addr diff
    }>	//  channel_id b_addr A B a_addr diff
    s3 s3 XCPU	//  channel_id b_addr diff B a_addr A diff
    ADD	//  channel_id b_addr diff B a_addr A
    s2 s3 XCHG2	//  channel_id b_addr A a_addr B diff
    SUB	//  channel_id b_addr A a_addr B
    s3 s3 s4 XCPU2
    3 PUSHINT	//  channel_id B A a_addr b_addr B channel_id _16=3
    send_payout CALLDICT
    s0 s0 s3 XCPUXC
    131 PUSHINT	//  A B a_addr A channel_id _20
    send_payout CALLDICT
    2 PUSHINT	//  A B _22
    NEWC	//  A B _22 _23
    3 STI	//  A B _25
    ROT	//  B _25 A
    STGRAMS	//  B _26
    SWAP	//  _26 B
    STGRAMS	//  _27
    ENDC	//  _28
  }>
  with_init PROC:<{
    //  state msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr init_timeout channel_id min_A_extra
    s0 s9 XCHG	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr init_timeout channel_id state
    unpack_state_init CALLDICT	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr init_timeout channel_id signed_A? signed_B? min_A min_B expire_at A B
    s2 PUSH	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr init_timeout channel_id signed_A? signed_B? min_A min_B expire_at A B expire_at
    0 EQINT	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr init_timeout channel_id signed_A? signed_B? min_A min_B expire_at A B _19
    IF:<{	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr init_timeout channel_id signed_A? signed_B? min_A min_B expire_at A B
      s2 POP	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr init_timeout channel_id signed_A? signed_B? min_A min_B B A
      NOW	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr init_timeout channel_id signed_A? signed_B? min_A min_B B A _20
      s0 s8 XCHG2	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr A channel_id signed_A? signed_B? min_A min_B B _20 init_timeout
      ADD	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr A channel_id signed_A? signed_B? min_A min_B B expire_at
      s0 s7 XCHG2	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at A
    }>ELSE<{
      s8 POP	//  min_A_extra msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at A
    }>
    s0 s12 XCHG	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at msg
    32 LDU	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at op msg
    0x43278a28 PUSHINT	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at op msg _26
    s2 s(-1) PUXC	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at op msg op _26
    EQUAL	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at op msg _27
    IFJMP:<{	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at op msg
      s2 s6 XCHG
      6 BLKDROP
      s5 POP
      s5 POP
      s6 POP
      s6 POP	//  b_addr B A channel_id expire_at a_addr
      35 PUSHINT	//  b_addr B A channel_id expire_at a_addr _28
      s0 s2 XCHG
      NOW	//  b_addr B A channel_id _28 a_addr expire_at _29
      LESS	//  b_addr B A channel_id _28 a_addr _30
      s1 s2 XCHG	//  b_addr B A channel_id a_addr _28 _30
      THROWANYIFNOT
      0 PUSHINT	//  b_addr B A channel_id a_addr _32=0
      s0 s4 PUXC
      s6 s3 XCHG2	//  _32=0 _33=0 A B a_addr b_addr channel_id
      do_payout CALLDICT	//  _34
    }>	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at op msg
    36 PUSHINT	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at op msg _35
    0x27317822 PUSHINT	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at op msg _35 _36
    s1 s3 XCHG	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at _35 msg op _36
    EQUAL	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at _35 msg _37
    s1 s2 XCHG	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at msg _35 _37
    THROWANYIFNOT
    LDGRAMS	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at _44 msg
    LDGRAMS	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at _44 _46 msg
    LDGRAMS	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at _44 _46 _48 msg
    LDGRAMS	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at _44 _46 _48 _50 msg
    64 LDU	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at _44 _46 _48 _50 _106 _105
    DROP	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A upd_min_B got_channel_id
    39 PUSHINT	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A upd_min_B got_channel_id _55
    s1 s11 XCPU	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A upd_min_B _55 got_channel_id channel_id
    EQUAL	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A upd_min_B _55 _56
    THROWANYIFNOT
    33 PUSHINT	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A upd_min_B _58
    s4 s3 PUSH2	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A upd_min_B _58 inc_A inc_B
    ADD	//  min_A_extra msg_value A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A upd_min_B _58 _59
    s1 18 s() XCHG	//  min_A_extra _58 A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A upd_min_B msg_value _59
    LESS	//  min_A_extra _58 A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A upd_min_B _60
    s1 17 s() XCHG	//  min_A_extra upd_min_B A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A _58 _60
    THROWANYIF
    34 PUSHINT	//  min_A_extra upd_min_B A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A _62
    s14 s8 PUSH2	//  min_A_extra upd_min_B A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A _62 msg_signed_A? signed_A?
    LESS	//  min_A_extra upd_min_B A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A _62 _63
    s14 s8 PUSH2	//  min_A_extra upd_min_B A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A _62 _63 msg_signed_B? signed_B?
    LESS	//  min_A_extra upd_min_B A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A _62 _63 _64
    OR	//  min_A_extra upd_min_B A msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at inc_A inc_B upd_min_A _62 _65
    THROWANYIFNOT
    s14 s2 XCHG2	//  min_A_extra upd_min_B inc_B msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at upd_min_A A inc_A
    ADD	//  min_A_extra upd_min_B inc_B msg_signed_A? msg_signed_B? a_addr b_addr B channel_id signed_A? signed_B? min_A min_B expire_at upd_min_A A
    s8 s13 XCHG2	//  min_A_extra upd_min_B A msg_signed_A? msg_signed_B? a_addr b_addr upd_min_A channel_id signed_A? signed_B? min_A min_B expire_at B inc_B
    ADD	//  min_A_extra upd_min_B A msg_signed_A? msg_signed_B? a_addr b_addr upd_min_A channel_id signed_A? signed_B? min_A min_B expire_at B
    s5 s11 XCHG2	//  min_A_extra upd_min_B A B msg_signed_B? a_addr b_addr upd_min_A channel_id expire_at signed_B? min_A min_B signed_A? msg_signed_A?
    OR	//  min_A_extra upd_min_B A B msg_signed_B? a_addr b_addr upd_min_A channel_id expire_at signed_B? min_A min_B signed_A?
    s2 s6 PUSH2	//  min_A_extra upd_min_B A B msg_signed_B? a_addr b_addr upd_min_A channel_id expire_at signed_B? min_A min_B signed_A? min_A upd_min_A
    LESS	//  min_A_extra upd_min_B A B msg_signed_B? a_addr b_addr upd_min_A channel_id expire_at signed_B? min_A min_B signed_A? _70
    IF:<{	//  min_A_extra upd_min_B A B msg_signed_B? a_addr b_addr upd_min_A channel_id expire_at signed_B? min_A min_B signed_A?
      s2 POP	//  min_A_extra upd_min_B A B msg_signed_B? a_addr b_addr min_A channel_id expire_at signed_B? signed_A? min_B
      s1 s5 XCHG	//  min_A_extra upd_min_B A B msg_signed_B? a_addr b_addr signed_A? channel_id expire_at signed_B? min_A min_B
    }>ELSE<{
      s6 POP	//  min_A_extra upd_min_B A B msg_signed_B? a_addr b_addr signed_A? channel_id expire_at signed_B? min_A min_B
    }>
    s2 s8 XCHG2	//  min_A_extra upd_min_B A B min_B a_addr b_addr signed_A? channel_id expire_at min_A signed_B? msg_signed_B?
    OR	//  min_A_extra upd_min_B A B min_B a_addr b_addr signed_A? channel_id expire_at min_A signed_B?
    s7 s10 PUSH2	//  min_A_extra upd_min_B A B min_B a_addr b_addr signed_A? channel_id expire_at min_A signed_B? min_B upd_min_B
    LESS	//  min_A_extra upd_min_B A B min_B a_addr b_addr signed_A? channel_id expire_at min_A signed_B? _72
    IF:<{	//  min_A_extra upd_min_B A B min_B a_addr b_addr signed_A? channel_id expire_at min_A signed_B?
      s7 POP	//  min_A_extra min_B A B signed_B? a_addr b_addr signed_A? channel_id expire_at min_A
      s6 s9 XCHG	//  min_A_extra signed_B? A B min_B a_addr b_addr signed_A? channel_id expire_at min_A
    }>ELSE<{
      s10 POP	//  min_A_extra signed_B? A B min_B a_addr b_addr signed_A? channel_id expire_at min_A
    }>
    s3 s9 PUSH2	//  min_A_extra signed_B? A B min_B a_addr b_addr signed_A? channel_id expire_at min_A signed_A? signed_B?
    AND	//  min_A_extra signed_B? A B min_B a_addr b_addr signed_A? channel_id expire_at min_A _73
    IFJMP:<{	//  min_A_extra signed_B? A B min_B a_addr b_addr signed_A? channel_id expire_at min_A
      NIP
      s2 POP
      s7 POP	//  min_A_extra channel_id A B min_B a_addr b_addr min_A
      s5 s7 XCHG2	//  min_A channel_id b_addr B min_B a_addr A min_A_extra
      SUB	//  min_A channel_id b_addr B min_B a_addr A
      s6 s6 XCPU	//  A channel_id b_addr B min_B a_addr min_A A
      GREATER	//  A channel_id b_addr B min_B a_addr _75
      s2 s3 XCPU	//  A channel_id b_addr B _75 a_addr min_B B
      GREATER	//  A channel_id b_addr B _75 a_addr _76
      s1 s2 XCHG	//  A channel_id b_addr B a_addr _75 _76
      OR	//  A channel_id b_addr B a_addr _77
      IFJMP:<{	//  A channel_id b_addr B a_addr
        0 PUSHINT	//  A channel_id b_addr B a_addr _78=0
        s0 s4 PUXC
        s1 s6 XCHG
        s1 s4 XCHG	//  _78=0 _79=0 A B a_addr b_addr channel_id
        do_payout CALLDICT	//  _80
      }>	//  A channel_id b_addr B a_addr
      s1 s3 XCHG
      3 BLKDROP	//  A B
      0 PUSHINT	//  A B _81=0
      s0 s0 s0 PUSH3	//  A B _81=0 _82=0 _83=0 _84=0
      DUP	//  A B _81=0 _82=0 _83=0 _84=0 _85=0
      2 5 BLKSWAP	//  _81=0 _82=0 _83=0 _84=0 _85=0 A B
      pack_state_close CALLDICT	//  _86
    }>	//  min_A_extra signed_B? A B min_B a_addr b_addr signed_A? channel_id expire_at min_A
    s2 POP
    s3 POP
    s3 POP
    s7 POP	//  signed_A? signed_B? A B min_B min_A expire_at
    s0 s4 s3 XCHG3	//  signed_A? signed_B? min_A min_B expire_at A B
    pack_state_init CALLDICT	//  _87
  }>
  with_close PROC:<{
    //  cs msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr expire_timeout channel_id
    s0 s9 XCHG	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr expire_timeout cs
    unpack_state_close CALLDICT	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr expire_timeout signed_A? signed_B? promise_A promise_B expire_at A B
    s2 PUSH	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr expire_timeout signed_A? signed_B? promise_A promise_B expire_at A B expire_at
    0 EQINT	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr expire_timeout signed_A? signed_B? promise_A promise_B expire_at A B _19
    IF:<{	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr expire_timeout signed_A? signed_B? promise_A promise_B expire_at A B
      s2 POP	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr expire_timeout signed_A? signed_B? promise_A promise_B B A
      NOW	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr expire_timeout signed_A? signed_B? promise_A promise_B B A _20
      s0 s7 XCHG2	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr A signed_A? signed_B? promise_A promise_B B _20 expire_timeout
      ADD	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr A signed_A? signed_B? promise_A promise_B B expire_at
      s0 s6 XCHG2	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at A
    }>ELSE<{
      s7 POP	//  channel_id msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at A
    }>
    s0 s13 XCHG	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at msg
    32 LDU	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at op msg
    0x43278a28 PUSHINT	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at op msg _26
    s2 s(-1) PUXC	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at op msg op _26
    EQUAL	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at op msg _27
    IFJMP:<{	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at op msg
      2DROP
      s3 POP
      s3 POP
      s6 POP
      s6 POP
      s6 POP
      s6 POP	//  channel_id A B promise_B expire_at promise_A a_addr b_addr
      35 PUSHINT	//  channel_id A B promise_B expire_at promise_A a_addr b_addr _28
      s0 s4 XCHG
      NOW	//  channel_id A B promise_B _28 promise_A a_addr b_addr expire_at _29
      LESS	//  channel_id A B promise_B _28 promise_A a_addr b_addr _30
      s1 s4 XCHG	//  channel_id A B promise_B b_addr promise_A a_addr _28 _30
      THROWANYIFNOT
      s1 s6 XCHG
      s3 s5 XCHG
      s3 s4 XCHG
      -ROT	//  promise_A promise_B A B a_addr b_addr channel_id
      do_payout CALLDICT	//  _32
    }>	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at op msg
    37 PUSHINT	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at op msg _33
    0xf28ae183 PUSHINT	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at op msg _33 _34
    s1 s3 XCHG	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at _33 msg op _34
    EQUAL	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at _33 msg _35
    s1 s2 XCHG	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at msg _33 _35
    THROWANYIFNOT
    34 PUSHINT	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at msg _37
    s13 s6 PUSH2	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at msg _37 msg_signed_A? signed_A?
    LESS	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at msg _37 _38
    s13 s6 PUSH2	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at msg _37 _38 msg_signed_B? signed_B?
    LESS	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at msg _37 _38 _39
    OR	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_A? signed_B? promise_A promise_B expire_at msg _37 _40
    THROWANYIFNOT
    s5 s12 XCPU	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B msg signed_B? promise_A promise_B expire_at signed_A? msg_signed_A?
    OR	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B msg signed_B? promise_A promise_B expire_at signed_A?
    s4 s11 XCPU	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B msg signed_A? promise_A promise_B expire_at signed_B? msg_signed_B?
    OR	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B msg signed_A? promise_A promise_B expire_at signed_B?
    s0 s5 XCHG	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at msg
    LDGRAMS	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at _46 msg
    LDGRAMS	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg
    1 LDI	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B has_sig msg
    SWAP	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg has_sig
    IF:<{	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg
      LDREF	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B _55 msg
      SWAP	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg _55
      CTOS	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg _57
      9 PUSHPOW2	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg _57 _58=512
      PLDSLICEX	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg sig
      OVER	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg sig msg
      HASHSU	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg sig hash
      s0 16 s() XCHG	//  channel_id A hash msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg sig msg_signed_A?
      IFNOT:<{	//  channel_id A hash msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg sig
        s3 POP	//  channel_id A hash msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at sig extra_B msg
        31 PUSHINT	//  channel_id A hash msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at sig extra_B msg _62
        s15 s3 s13 PU2XC	//  channel_id A hash msg_signed_B? _62 b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at sig extra_B msg hash sig a_key
        CHKSIGNU	//  channel_id A hash msg_signed_B? _62 b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at sig extra_B msg _63
        s1 s13 XCHG	//  channel_id A hash msg_signed_B? msg b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at sig extra_B _62 _63
        THROWANYIFNOT
        s1 s11 XCHG
        0 PUSHINT
        s0 s2 XCHG	//  channel_id A hash msg_signed_B? sig b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A=0 extra_B msg
      }>ELSE<{
        s13 POP	//  channel_id A hash msg_signed_B? sig b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg
      }>
      s0 s13 XCHG	//  channel_id A hash msg sig b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg_signed_B?
      IFNOT:<{	//  channel_id A hash msg sig b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B
        DROP	//  channel_id A hash msg sig b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A
        32 PUSHINT	//  channel_id A hash msg sig b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A _66
        s13 s11 s10 XCHG3	//  channel_id A expire_at msg extra_A _66 a_addr b_addr B signed_B? signed_A? promise_A promise_B hash sig b_key
        CHKSIGNU	//  channel_id A expire_at msg extra_A _66 a_addr b_addr B signed_B? signed_A? promise_A promise_B _67
        s1 s8 XCHG	//  channel_id A expire_at msg extra_A promise_B a_addr b_addr B signed_B? signed_A? promise_A _66 _67
        THROWANYIFNOT
        0 PUSHINT	//  channel_id A expire_at msg extra_A promise_B a_addr b_addr B signed_B? signed_A? promise_A extra_B=0
        s0 s7 XCHG	//  channel_id A expire_at msg extra_A extra_B=0 a_addr b_addr B signed_B? signed_A? promise_A promise_B
      }>ELSE<{
        s2 s13 XCHG
        s10 POP
        s10 POP
        DROP	//  channel_id A expire_at msg extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A promise_B
      }>
    }>ELSE<{	//  channel_id A msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr B signed_B? signed_A? promise_A promise_B expire_at extra_A extra_B msg
      s11 POP
      2DROP
      s9 POP	//  channel_id A msg_signed_A? msg_signed_B? expire_at msg a_addr b_addr B signed_B? signed_A? promise_A promise_B
      38 PUSHINT	//  channel_id A msg_signed_A? msg_signed_B? expire_at msg a_addr b_addr B signed_B? signed_A? promise_A promise_B _70
      s11 s10 XCHG2	//  channel_id A promise_B _70 expire_at msg a_addr b_addr B signed_B? signed_A? promise_A msg_signed_A? msg_signed_B?
      AND	//  channel_id A promise_B _70 expire_at msg a_addr b_addr B signed_B? signed_A? promise_A _71
      s1 s9 XCHG	//  channel_id A promise_B promise_A expire_at msg a_addr b_addr B signed_B? signed_A? _70 _71
      THROWANYIFNOT
      0 PUSHINT	//  channel_id A promise_B promise_A expire_at msg a_addr b_addr B signed_B? signed_A? extra_A=0
      DUP	//  channel_id A promise_B promise_A expire_at msg a_addr b_addr B signed_B? signed_A? extra_A=0 extra_B=0
      s8 s10 XCHG
      s0 s7 XCHG
      s9 s9 XCHG2
      s0 s8 XCHG	//  channel_id A expire_at msg extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A promise_B
    }>
    s0 s9 XCHG	//  channel_id A expire_at promise_B extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A msg
    64 LDU	//  channel_id A expire_at promise_B extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A _78 msg
    LDGRAMS	//  channel_id A expire_at promise_B extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A _78 _81 msg
    LDGRAMS	//  channel_id A expire_at promise_B extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A _78 _81 _118 _117
    DROP	//  channel_id A expire_at promise_B extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A got_channel_id update_promise_A update_promise_B
    39 PUSHINT	//  channel_id A expire_at promise_B extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A got_channel_id update_promise_A update_promise_B _85
    s3 s15 XCPU	//  channel_id A expire_at promise_B extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A _85 update_promise_A update_promise_B got_channel_id channel_id
    EQUAL	//  channel_id A expire_at promise_B extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A _85 update_promise_A update_promise_B _86
    s1 s3 XCHG	//  channel_id A expire_at promise_B extra_A extra_B a_addr b_addr B signed_B? signed_A? promise_A update_promise_B update_promise_A _85 _86
    THROWANYIFNOT
    ACCEPT
    s0 s9 XCHG2	//  channel_id A expire_at promise_B update_promise_B extra_B a_addr b_addr B signed_B? signed_A? promise_A update_promise_A extra_A
    ADD	//  channel_id A expire_at promise_B update_promise_B extra_B a_addr b_addr B signed_B? signed_A? promise_A update_promise_A
    2DUP	//  channel_id A expire_at promise_B update_promise_B extra_B a_addr b_addr B signed_B? signed_A? promise_A update_promise_A promise_A update_promise_A
    LESS	//  channel_id A expire_at promise_B update_promise_B extra_B a_addr b_addr B signed_B? signed_A? promise_A update_promise_A _90
    IF:<{	//  channel_id A expire_at promise_B update_promise_B extra_B a_addr b_addr B signed_B? signed_A? promise_A update_promise_A
      NIP	//  channel_id A expire_at promise_B update_promise_B extra_B a_addr b_addr B signed_B? signed_A? promise_A
    }>ELSE<{
      DROP	//  channel_id A expire_at promise_B update_promise_B extra_B a_addr b_addr B signed_B? signed_A? promise_A
    }>
    s7 s6 XCHG2	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B? update_promise_B extra_B
    ADD	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B? update_promise_B
    s7 s0 PUSH2	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B? update_promise_B promise_B update_promise_B
    LESS	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B? update_promise_B _92
    IF:<{	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B? update_promise_B
      s7 POP	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B?
    }>ELSE<{
      DROP	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B?
    }>
    s5 s0 PUSH2	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B? signed_A? signed_B?
    AND	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B? _93
    IFJMP:<{	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B?
      DROP
      s4 POP
      s5 POP	//  channel_id A b_addr promise_B B promise_A a_addr
      s1 s6 XCHG
      s3 s5 XCHG
      s3 s4 XCHG
      s0 s3 s3 XCHG3	//  promise_A promise_B A B a_addr b_addr channel_id
      do_payout CALLDICT	//  _94
    }>	//  channel_id A expire_at promise_B signed_A? promise_A a_addr b_addr B signed_B?
    2 2 BLKDROP2
    s7 POP	//  signed_B? A expire_at promise_B signed_A? promise_A B
    s2 s6 XCHG
    s5 s4 s0 XCHG3
    s1 s2 XCHG	//  signed_A? signed_B? promise_A promise_B expire_at A B
    pack_state_close CALLDICT	//  _95
  }>
  with_payout PROC:<{
    //  cs msg a_addr b_addr channel_id
    s0 s3 XCHG	//  cs channel_id a_addr b_addr msg
    32 LDU	//  cs channel_id a_addr b_addr _35 _34
    DROP	//  cs channel_id a_addr b_addr op
    37 PUSHINT	//  cs channel_id a_addr b_addr op _9
    0x37fe7810 PUSHINT	//  cs channel_id a_addr b_addr op _9 _10
    s1 s2 XCHG	//  cs channel_id a_addr b_addr _9 op _10
    EQUAL	//  cs channel_id a_addr b_addr _9 _11
    THROWANYIFNOT
    s0 s3 XCHG	//  b_addr channel_id a_addr cs
    LDGRAMS	//  b_addr channel_id a_addr _15 cs
    LDGRAMS	//  b_addr channel_id a_addr _15 _39 _38
    DROP	//  b_addr channel_id a_addr A B
    41 PUSHINT	//  b_addr channel_id a_addr A B _19
    s2 s1 PUSH2	//  b_addr channel_id a_addr A B _19 A B
    ADD	//  b_addr channel_id a_addr A B _19 _20
    1000000000 PUSHINT	//  b_addr channel_id a_addr A B _19 _20 _21=1000000000
    ADD	//  b_addr channel_id a_addr A B _19 _22
    BALANCE	//  b_addr channel_id a_addr A B _19 _22 _23
    FIRST	//  b_addr channel_id a_addr A B _19 _22 _24
    LESS	//  b_addr channel_id a_addr A B _19 _25
    THROWANYIFNOT
    ACCEPT
    s4 s0 s3 XC2PU
    3 PUSHINT	//  A channel_id a_addr b_addr B channel_id _28=3
    send_payout CALLDICT
    -ROT
    131 PUSHINT	//  a_addr A channel_id _32
    send_payout CALLDICT
  }>
  recv_any PROC:<{
    //  msg_value msg
    DUP	//  msg_value msg msg
    SEMPTY	//  msg_value msg _2
    IFJMP:<{	//  msg_value msg
      2DROP	// 
    }>	//  msg_value msg
    32 LDU	//  msg_value op msg
    OVER	//  msg_value op msg op
    2 LESSINT	//  msg_value op msg _8
    IFJMP:<{	//  msg_value op msg
      3 BLKDROP	// 
    }>	//  msg_value op msg
    40 PUSHINT	//  msg_value op msg _9
    0x912838d1 PUSHINT	//  msg_value op msg _9 _10
    s1 s3 XCHG	//  msg_value _9 msg op _10
    EQUAL	//  msg_value _9 msg _11
    s1 s2 XCHG	//  msg_value msg _9 _11
    THROWANYIFNOT
    unpack_data INLINECALLDICT	//  msg_value msg config state
    OVER	//  msg_value msg config state config
    unpack_config CALLDICT	//  msg_value msg config state init_timeout close_timeout a_key b_key a_addr b_addr channel_id min_A_extra
    s10 s5 s4 XCPU2	//  msg_value min_A_extra config state init_timeout close_timeout a_key b_key a_addr b_addr channel_id msg a_key b_key
    unwrap_signatures CALLDICT	//  msg_value min_A_extra config state init_timeout close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? msg_signed_B?
    s10 PUSH	//  msg_value min_A_extra config state init_timeout close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? msg_signed_B? state
    CTOS	//  msg_value min_A_extra config state init_timeout close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? msg_signed_B? cs
    3 LDU	//  msg_value min_A_extra config state init_timeout close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? msg_signed_B? state_type cs
    0 PUSHINT	//  msg_value min_A_extra config state init_timeout close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? msg_signed_B? state_type cs _35
    s2 s(-1) PUXC	//  msg_value min_A_extra config state init_timeout close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? msg_signed_B? state_type cs state_type _35
    EQUAL	//  msg_value min_A_extra config state init_timeout close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? msg_signed_B? state_type cs _36
    IF:<{	//  msg_value min_A_extra config state init_timeout close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? msg_signed_B? state_type cs
      s12 POP	//  msg_value min_A_extra config cs init_timeout close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? msg_signed_B? state_type
      s11 PUSH
      s15 s1 s3 XCHG3
      s4 PUSH
      s2 s1 XCPU
      17 s() PUSH
      s10 s2 s(-1) PUXC2
      s10 PUSH
      s0 s2 XCHG
      s1 16 s() XCHG
      s10 s(-1) PUXC
      s0 20 s() XCHG	//  msg_signed_B? state_type config cs msg_signed_A? close_timeout a_key b_key a_addr b_addr channel_id msg cs msg_value msg msg_signed_A? msg_signed_B? a_addr b_addr init_timeout channel_id min_A_extra
      with_init CALLDICT	//  msg_signed_B? state_type config cs msg_signed_A? close_timeout a_key b_key a_addr b_addr channel_id msg state
      s0 s9 XCHG
      s0 s8 XCHG	//  msg_signed_B? state_type config state cs close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A?
    }>ELSE<{
      s2 s15 XCHG
      s11 POP
      s13 POP
      DROP	//  msg_signed_B? state_type config state cs close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A?
    }>
    1 PUSHINT	//  msg_signed_B? state_type config state cs close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? _38
    s12 s(-1) PUXC	//  msg_signed_B? state_type config state cs close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? state_type _38
    EQUAL	//  msg_signed_B? state_type config state cs close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A? _39
    IF:<{	//  msg_signed_B? state_type config state cs close_timeout a_key b_key a_addr b_addr channel_id msg msg_signed_A?
      s9 POP	//  msg_signed_B? state_type config msg_signed_A? cs close_timeout a_key b_key a_addr b_addr channel_id msg
      s7 PUSH
      s1 s5 s4 PUXC2
      s0 s4 PUSH2
      s6 s12 XCHG
      s5 s15 XCHG
      s4 s9 XCHG
      s0 s10 s15 XC2PU	//  channel_id state_type config b_addr cs a_addr msg cs msg msg_signed_A? msg_signed_B? a_key b_key a_addr b_addr close_timeout channel_id
      with_close CALLDICT	//  channel_id state_type config b_addr cs a_addr msg state
      s7 s1 s4 XCHG3
      -ROT	//  a_addr state_type config state cs b_addr channel_id msg
    }>ELSE<{
      DROP
      s3 s11 XCHG
      4 3 BLKDROP2	//  a_addr state_type config state cs b_addr channel_id msg
    }>
    2 PUSHINT	//  a_addr state_type config state cs b_addr channel_id msg _41
    s1 s7 XCHG	//  a_addr msg config state cs b_addr channel_id state_type _41
    EQUAL	//  a_addr msg config state cs b_addr channel_id _42
    IF:<{	//  a_addr msg config state cs b_addr channel_id
      s2 s4 XCHG
      5 2 REVERSE	//  config state cs msg a_addr b_addr channel_id
      with_payout CALLDICT
    }>ELSE<{
      3 BLKDROP
      2 2 BLKDROP2	//  config state
    }>
    pack_data INLINECALLDICT
  }>
  recv_internal PROC:<{
    //  msg_value in_msg_cell in_msg
    NIP	//  msg_value in_msg
    recv_any CALLDICT
  }>
  recv_external PROC:<{
    //  in_msg
    0 PUSHINT	//  in_msg _1=0
    SWAP	//  _1=0 in_msg
    recv_any CALLDICT
  }>
}END>c
